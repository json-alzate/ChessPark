import { <%= classifyName %>State } from '../../lib/<%= name %>/<%= name %>.state';
<% if (entityType === 'list') { %>
<% if (createModel) { %>
import { Xerpa<%= classifyName %> } from '@xerpa/models';
<% } else { %>
// TODO: Importar el modelo cuando se cree
// import { Xerpa<%= classifyName %> } from '@xerpa/models';
interface Xerpa<%= classifyName %> {
  id: string;
  name: string;
  description?: string;
  createdAt: Date;
  updatedAt: Date;
}
<% } %>
<% } %>
import {
<% if (entityType === 'list') { %>
  get<%= classifyName %>,
  get<%= classifyName %>ById,
  get<%= classifyName %>Count,
<% } else { %>
  get<%= classifyName %>Data,
<% } %>
  get<%= classifyName %>Loading,
  get<%= classifyName %>Error,
} from '../../lib/<%= name %>/<%= name %>.selectors';

describe('<%= classifyName %> Selectors', () => {
  let mockState: <%= classifyName %>State;

  beforeEach(() => {
<% if (entityType === 'list') { %>
    mockState = {
      <%= propertyName %>: [
        { id: '1', name: 'Test <%= classifyName %> 1', description: 'Test 1', createdAt: new Date(), updatedAt: new Date() },
        { id: '2', name: 'Test <%= classifyName %> 2', description: 'Test 2', createdAt: new Date(), updatedAt: new Date() }
      ],
      loading<%= classifyName %>: false,
      error: null,
    };
<% } else { %>
    mockState = {
      data: { id: '1', name: 'Test <%= classifyName %>' },
      loading<%= classifyName %>: false,
      error: null,
    };
<% } %>
  });

<% if (entityType === 'list') { %>
  it('should select <%= propertyName %>', () => {
    const result = get<%= classifyName %>.projector(mockState);
    expect(result).toEqual(mockState.<%= propertyName %>);
  });

  it('should select <%= propertyName %> by id', () => {
    const result = get<%= classifyName %>ById('1').projector(mockState);
    expect(result).toEqual(mockState.<%= propertyName %>[0]);
  });

  it('should select <%= propertyName %> count', () => {
    const result = get<%= classifyName %>Count.projector(mockState);
    expect(result).toBe(2);
  });

  it('should return undefined for non-existent id', () => {
    const result = get<%= classifyName %>ById('999').projector(mockState);
    expect(result).toBeUndefined();
  });
<% } else { %>
  it('should select <%= name %> data', () => {
    const result = get<%= classifyName %>Data.projector(mockState);
    expect(result).toEqual(mockState.data);
  });
<% } %>

  it('should select loading state', () => {
    const result = get<%= classifyName %>Loading.projector(mockState);
    expect(result).toBe(false);
  });

  it('should select error state', () => {
    const result = get<%= classifyName %>Error.projector(mockState);
    expect(result).toBe(null);
  });

  it('should handle loading state', () => {
    mockState.loading<%= classifyName %> = true;
    const result = get<%= classifyName %>Loading.projector(mockState);
    expect(result).toBe(true);
  });

  it('should handle error state', () => {
    mockState.error = 'Error message';
    const result = get<%= classifyName %>Error.projector(mockState);
    expect(result).toBe('Error message');
  });
});
