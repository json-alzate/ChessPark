import { <%= classifyName %>State, get<%= classifyName %>State } from '../../lib/<%= name %>/<%= name %>.state';

describe('<%= classifyName %> State', () => {
  let state: <%= classifyName %>State;

  beforeEach(() => {
    state = {
      <% if (entityType === 'list') { %>
      <%= propertyName %>: [],
      <% } else { %>
      data: null,
      <% } %>
      loading<%= classifyName %>: false,
      error: null,
    };
  });

  describe('State Structure', () => {
    it('should have the correct structure', () => {
      expect(state).toHaveProperty('<% if (entityType === 'list') { %><%= propertyName %><% } else { %>data<% } %>');
      expect(state).toHaveProperty('loading<%= classifyName %>');
      expect(state).toHaveProperty('error');
    });

    it('should have correct initial values', () => {
      <% if (entityType === 'list') { %>
      expect(state.<%= propertyName %>).toEqual([]);
      <% } else { %>
      expect(state.data).toBeNull();
      <% } %>
      expect(state.loading<%= classifyName %>).toBe(false);
      expect(state.error).toBeNull();
    });
  });

  describe('Selector', () => {
    it('should return the <%= name %> state', () => {
      const result = get<%= classifyName %>State.projector(state);
      expect(result).toBe(state);
    });
  });

  <% if (entityType === 'list') { %>
  describe('List Operations', () => {
    it('should handle empty <%= propertyName %> list', () => {
      expect(state.<%= propertyName %>.length).toBe(0);
    });

    it('should allow <%= propertyName %> to be populated', () => {
      const mock<%= classifyName %> = [{ id: '1', name: 'Test' }];
      state.<%= propertyName %> = mock<%= classifyName %>;
      expect(state.<%= propertyName %>).toEqual(mock<%= classifyName %>);
    });
  });
  <% } else { %>
  describe('Single Item Operations', () => {
    it('should handle null data initially', () => {
      expect(state.data).toBeNull();
    });

    it('should allow data to be set', () => {
      const mockData = { id: '1', name: 'Test' };
      state.data = mockData;
      expect(state.data).toEqual(mockData);
    });
  });
  <% } %>

  describe('Loading State', () => {
    it('should handle loading state changes', () => {
      expect(state.loading<%= classifyName %>).toBe(false);
      
      state.loading<%= classifyName %> = true;
      expect(state.loading<%= classifyName %>).toBe(true);
    });
  });

  describe('Error Handling', () => {
    it('should handle error state changes', () => {
      expect(state.error).toBeNull();
      
      const errorMessage = 'Test error message';
      state.error = errorMessage;
      expect(state.error).toBe(errorMessage);
    });

    it('should allow error to be cleared', () => {
      state.error = 'Test error';
      expect(state.error).toBe('Test error');
      
      state.error = null;
      expect(state.error).toBeNull();
    });
  });
});
